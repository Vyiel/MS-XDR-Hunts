// Detect credential theft with comsvcs minidump function, dumping LSASS for later extraction.
//
// Again, moving over to the fundamentals, that are same such of Mimikatz's or ProcDump's.
// Lsass.exe is accessed via OpenProcessApiCall and then read via ReadProcessMemoryApiCall, and then finally saved as a dump file.
//
// The reason for similarity within all three of these processes and more coming, is that whatever the tool or technique one uses, at the system level, the same functions are called at the end of the day whenever any process is accessed, read, copied, 
// written on or injected. For copying the memory of LSASS, it's just specific to LSASS, and some internal signature of the tool/technique is the main hunt point.
//
// For the Comsvcs technique, the DLL is loaded by Rundll32.exe, and within, a function "minidump" is invoked, where the PID of Lsass.exe is fed into, and the contents saved as an anticipated .dmp file.
//
// In this case, the signature or internal filename wouldn't help a lot due to the tools are LOLBINs. Here we could leverage a process tree schema. 
// Rundll32.exe or Regsvr32.exe will always be the initiating process for loading the DLL, which we can leverage. Thus bellow query.
//
DeviceEvents
| where ActionType in ("OpenProcessApiCall", "ReadProcessMemoryApiCall")
| where FileName has ("lsass.exe")
| where InitiatingProcessVersionInfoInternalFileName contains @"rundll" or InitiatingProcessFileName contains "regsvr32"
| where InitiatingProcessCommandLine has_any ("comsvcs", "minidump", "full") or InitiatingProcessCommandLine != ""
| summarize DetectionCount = count(), 
            FirstTimeDetected = min(Timestamp), 
            LastTimeDetected = max(Timestamp) 
  by DeviceName, InitiatingProcessFileName, InitiatingProcessCommandLine
| project DeviceName, InitiatingProcessFileName, InitiatingProcessCommandLine, DetectionCount, FirstTimeDetected, LastTimeDetected 
| order by FirstTimeDetected desc
