// Detect usage of LOLBIN Esentutl to dump SAM, SYSTEM and SECURITY.

// Just like SAM Credential theft by Registry, this is yet another process to do the same, except it's not registry that dumps the three files, but Esentutl does.
// How it works, is the 3 files are already there in: "C:\Windows\System32\config". But as they are on use by the OS, and due to security restrictions, the files are not allowed to be copied.

// These files (not going deeper) contains keys, that with each other's help, helps to extract and steal system credentials.

// Now as these files are locked, it can't be just copy pasted, BUT can be backed up. Volume Shadow Copy is the way to do that. Both in Domain and Non domain connected workstations. Now, if VSC can be invoked to back those files up, which in-turn is a 
// glorified copy paste of sorts, one can have those files to be cracked offline.

// Fundamental Observations: 
// After using esentutl to dump SAM, SYSTEM and SECURITY, I saw nothing significant in deviceEvents table but mainly on deviceProcessEvents for process created (process being esentutl.exe with it's command lines)
// AND a lot of artifacts in deviceRegistryEvents, where vssvc.exe, runs from svchost.exe which is ran by services.exe, creating and deleting registry keys in the location HKLM\BCD00000000

// So now we have something fundamental. Yes a static rule can be created to just check for esentutl with commandline matches, but that will fail with the slightest bit of obfuscation if not done correctly. Although this method helps if done 
// upside down, that is we will first check for deviceRegistryEvents where something like this happened, matched with deviceProcessEvents later on, which is a bit obfuscation proof.

// Some of the conditions can be modified or removed based on how fundamental you want to go, but here's my query. And no to mention, if you find a mistake with mine or a better query, Please do contribute.

let regEvents = 
    DeviceRegistryEvents
    | extend RegistryTime = bin(Timestamp, 1s)
    | where InitiatingProcessFileName has @"vssvc.exe"
    | where ActionType has "RegistryKeyCreated" and RegistryKey contains "HKEY_LOCAL_MACHINE\\BCD00000000"
    | project RegistryTime, DeviceName, ActionType, RegistryKey, InitiatingProcessFileName, InitiatingProcessCommandLine
    | summarize by DeviceName, ActionType, InitiatingProcessFileName, InitiatingProcessCommandLine, bin(RegistryTime, 1h);
DeviceProcessEvents
| extend processTime = bin(Timestamp, 1s)
| join kind=inner ( regEvents ) on DeviceName
| where abs(datetime_diff("second", RegistryTime, RegistryTime)) <= 2
| where FileName contains "esentutl"
    | extend ProcessTime = bin(Timestamp, 1s)
    | where ProcessVersionInfoInternalFileName has @"esentutl"
    | where ProcessCommandLine matches regex @"(?i)s[^a-zA-Z]*a[^a-zA-Z]*m"
    or ProcessCommandLine matches regex @"(?i)s[^a-zA-Z]*y[^a-zA-Z]*s[^a-zA-Z]*t[^a-zA-Z]*e[^a-zA-Z]*m" 
    or ProcessCommandLine matches regex @"(?i)s[^a-zA-Z]*e[^a-zA-Z]*c[^a-zA-Z]*u[^a-zA-Z]*r[^a-zA-Z]*i[^a-zA-Z]*t[^a-zA-Z]*y"
| project RegistryTime, ProcessTime, DeviceName, FileName, FolderPath, ProcessCommandLine, InitiatingProcessFileName, InitiatingProcessCommandLine, InitiatingProcessCommandLine1
| summarize DetectionCount = count(), 
            FirstTimeDetected = min(ProcessTime), 
            LastTimeDetected = max(ProcessTime) 
  by DeviceName, InitiatingProcessFileName, FileName, ProcessCommandLine
| project DeviceName, FileName, ProcessCommandLine, DetectionCount, FirstTimeDetected, LastTimeDetected 
| order by FirstTimeDetected desc
