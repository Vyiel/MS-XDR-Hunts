// Detect Credential Theft with ProcDump

// With procdump credential theft, the fundamentals are same such of Mimikatzs'.
// Lsass.exe is accessed via OpenProcessApiCall and then read via ReadProcessMemoryApiCall, and then finally saved as a dump file.
// In this case, unlike Mimikatz, there's no privilege debug, so we don't need to lookout for the "ProcessPrimaryTokenModified".

// Surprisingly, for 1 procdump execution, I saw 10 total OpenProcessCalls making it hard for the eyes. So I summarized it with groups and projects.
// Now it will simply detect device, initiating process and it's counts.

// Note, this is exclusive to procdump where the query is specifically searching for the internal file name for ProcDump. As, if we remove some of the specifics, it will pull up with too many false positives.
// So this is the last I could come up with, if you can suggest a better one, you are always welcome.

DeviceEvents
| where ActionType in ("OpenProcessApiCall", "ReadProcessMemoryApiCall")
| where FileName has_any ("lsass.exe")
| where InitiatingProcessVersionInfoInternalFileName contains @"ProcDump"
| where InitiatingProcessCommandLine has_any ("-ma lsass.exe") or InitiatingProcessCommandLine != ""
| summarize DetectionCount = count(), 
            FirstTimeDetected = min(Timestamp), 
            LastTimeDetected = max(Timestamp) 
  by DeviceName, InitiatingProcessFileName, AccountName
| project DeviceName, InitiatingProcessFileName, AccountName, DetectionCount, FirstTimeDetected, LastTimeDetected 
| order by FirstTimeDetected desc
